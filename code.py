# -*- coding: utf-8 -*-
"""Kelompok 7 SDGs 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q8Uewf2yIvjsX9x4iR_iuJ-WasUFJTx7

##PROYEK DATA DAN ANALISIS

Model Prediksi Harga Multi-Komoditas Pangan di Indonesia Berbasis Long Short-Term Memory (LSTM) untuk Mendukung Stabilitas Harga dan Pencapaian SDGs 2 (Tanpa Kelaparan)

KELOMPOK 7 :

- MUHAMMAD FERDIANSYAH PUTRA - 1519622066

- DANIEL ANDREW SIAHAAN - 1519622023

- SECILIA DEARTHA PALMARIA SIAHAAN - 1519622022

##Tahap 1: Pengumpulan Data ( Data Collection )
"""

# ===========================================================================================
# TAHAP 1: PENGUMPULAN DATA (DATA COLLECTION)
# ===========================================================================================

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

print("="*90)
print("TAHAP 1: PENGUMPULAN DATA")
print("="*90)

# Load dataset
df_raw = pd.read_excel('dataset.xlsx')

print(f"\nDataset Information:")
print(f"   Shape: {df_raw.shape}")
print(f"   Columns: {df_raw.columns.tolist()[:5]}... (dan {df_raw.shape[1]-5} lainnya)")
print(f"\nPreview Data:")
print(df_raw.head())

komoditas_list = df_raw.iloc[:, 1].tolist()  # Kolom kedua adalah nama komoditas
print(f"\nTotal Komoditas: {len(komoditas_list)}")
print("="*90)

"""##Tahap 2: Pra-pemrosesan Data (Data Preprocessing)"""

# ===========================================================================================
# TAHAP 2: PRA-PEMROSESAN DATA (DATA PREPROCESSING) - OPTIMIZED
# ===========================================================================================

from sklearn.preprocessing import MinMaxScaler

print("="*90)
print("TAHAP 2: PRA-PEMROSESAN DATA")
print("="*90)

# Transpose data - mulai dari kolom ke-3 (kolom 0 = No, kolom 1 = Komoditas)
df_data = df_raw.iloc[:, 2:]
df_transposed = df_data.T
df_transposed.columns = komoditas_list
df_transposed.reset_index(inplace=True)
df_transposed.rename(columns={'index': 'Tanggal'}, inplace=True)

# Convert tanggal dan sort
df_transposed['Tanggal'] = pd.to_datetime(df_transposed['Tanggal'], format='%d/ %m/ %Y', errors='coerce')
df_transposed = df_transposed.dropna(subset=['Tanggal'])
df_transposed = df_transposed.sort_values('Tanggal').reset_index(drop=True)

# Konversi ke numeric - hapus koma dan konversi
for kolom in komoditas_list:
    if df_transposed[kolom].dtype == 'object':
        df_transposed[kolom] = df_transposed[kolom].str.replace(',', '').str.replace('"', '')
    df_transposed[kolom] = pd.to_numeric(df_transposed[kolom], errors='coerce')

# Interpolasi untuk missing values
df_transposed[komoditas_list] = df_transposed[komoditas_list].interpolate(method='linear', limit_direction='both')
df_transposed[komoditas_list] = df_transposed[komoditas_list].fillna(method='bfill').fillna(method='ffill')

# Normalisasi dengan MinMaxScaler
scalers = {}
data_normalized = np.zeros((len(df_transposed), len(komoditas_list)))

for i, kolom in enumerate(komoditas_list):
    scaler = MinMaxScaler(feature_range=(0, 1))
    data_normalized[:, i] = scaler.fit_transform(df_transposed[[kolom]].values).flatten()
    scalers[kolom] = scaler

# Buat sequences dengan TIME_STEPS optimal (dikurangi untuk mengurangi complexity)
def create_sequences(data, time_steps=20):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:i+time_steps])
        y.append(data[i+time_steps])
    return np.array(X), np.array(y)

TIME_STEPS = 20  # Dikurangi dari 30 ke 20 untuk faster convergence
X, y = create_sequences(data_normalized, TIME_STEPS)

# Split train/test (90/10) - lebih banyak data training untuk MAPE lebih baik
split_idx = int(len(X) * 0.90)
X_train, X_test = X[:split_idx], X[split_idx:]
y_train, y_test = y[:split_idx], y[split_idx:]

print(f"\nData Preprocessing:")
print(f"   Time Steps: {TIME_STEPS}")
print(f"   Train Samples: {X_train.shape[0]}")
print(f"   Test Samples: {X_test.shape[0]}")
print(f"   Features: {X_train.shape[2]} komoditas")
print(f"   Split Ratio: 90/10 (lebih banyak data training)")
print("="*90)

"""##Tahap 3: Pemilihan Model (Model Selection)"""

# ===========================================================================================
# TAHAP 3: PEMILIHAN MODEL (MODEL SELECTION) - SUPER OPTIMIZED
# ===========================================================================================

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Bidirectional, Dropout, Dense, BatchNormalization
from tensorflow.keras.regularizers import l2

print("="*90)
print("TAHAP 3: PEMILIHAN MODEL")
print("="*90)

# Build model LSTM SUPER OPTIMAL (simplified architecture untuk 100 epoch)
model = Sequential([
    # Layer 1: Bidirectional LSTM dengan units optimal
    Bidirectional(LSTM(128, return_sequences=True,
                       kernel_regularizer=l2(0.0005),
                       recurrent_regularizer=l2(0.0005),
                       input_shape=(X_train.shape[1], X_train.shape[2]))),
    BatchNormalization(),
    Dropout(0.3),  # Dropout optimal 20-40% berdasarkan research

    # Layer 2: LSTM
    LSTM(64, return_sequences=False,
         kernel_regularizer=l2(0.0005),
         recurrent_regularizer=l2(0.0005)),
    BatchNormalization(),
    Dropout(0.2),

    # Dense layers (simplified)
    Dense(64, activation='relu', kernel_regularizer=l2(0.0005)),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(X_train.shape[2])
])

print("\nModel Architecture (Optimized for 100 Epochs):")
model.summary()
print("="*90)

"""##Tahap 4: Modeling dan Training (Pelatihan Model)"""

# ===========================================================================================
# TAHAP 4: MODELING DAN TRAINING (PELATIHAN MODEL) - 100 EPOCHS OPTIMAL
# ===========================================================================================

from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint

print("="*90)
print("TAHAP 4: TRAINING MODEL - 100 EPOCHS OPTIMAL")
print("="*90)

# Compile model dengan learning rate optimal (0.001 untuk 100 epoch)
model.compile(optimizer=Adam(learning_rate=0.001), loss='huber', metrics=['mae'])

# Callbacks dengan patience lebih ketat untuk 100 epoch
early_stop = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True, verbose=1)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=8, min_lr=1e-7, verbose=1)
checkpoint = ModelCheckpoint('best_lstm_model.h5', monitor='val_loss', save_best_only=True, verbose=0)

print("\nMemulai training dengan:")
print(f"   Epochs: 100 (Optimal dengan Early Stopping)")
print(f"   Batch Size: 32 (Optimal untuk convergence)")
print(f"   Learning Rate: 0.001 (Higher untuk faster convergence)")
print(f"   Optimizer: Adam")
print(f"   Loss Function: Huber")
print(f"   Early Stopping Patience: 20")
print(f"   ReduceLR Patience: 8\n")

# Training dengan batch size optimal 32
history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=100,  # OPTIMIZED: 100 epoch
    batch_size=32,  # OPTIMIZED: 32 batch size (sweet spot)
    callbacks=[early_stop, reduce_lr, checkpoint],
    verbose=1
)

print(f"\nTraining selesai!")
print(f"   Total Epochs Trained: {len(history.history['loss'])}")
print(f"   Best Val Loss: {min(history.history['val_loss']):.6f}")
print(f"   Final Learning Rate: {model.optimizer.learning_rate.numpy():.7f}")
print(f"   Model disimpan: best_lstm_model.h5")
print("="*90)

"""##Tahap 5: Evaluasi Model (Model Evaluation)"""

# ===========================================================================================
# TAHAP 5: EVALUASI MODEL (MODEL EVALUATION) - MODERN VISUALIZATION
# ===========================================================================================

import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tensorflow.keras.models import load_model
from scipy.signal import savgol_filter
from scipy.ndimage import gaussian_filter1d

# Set Modern Style untuk Matplotlib (Style 2025)
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = '#f8f9fa'
plt.rcParams['grid.alpha'] = 0.3
plt.rcParams['grid.linestyle'] = '--'

print("="*90)
print("TAHAP 5: EVALUASI MODEL")
print("="*90)

# Load best model
model = load_model('best_lstm_model.h5', compile=False)
model.compile(optimizer=Adam(learning_rate=0.001), loss='huber', metrics=['mae'])

# Prediksi
y_pred_norm = model.predict(X_test, verbose=0)

# Inverse transform ke skala asli
y_pred = np.zeros_like(y_pred_norm)
y_true = np.zeros_like(y_test)

for i, kolom in enumerate(komoditas_list):
    y_pred[:, i] = scalers[kolom].inverse_transform(y_pred_norm[:, i].reshape(-1, 1)).flatten()
    y_true[:, i] = scalers[kolom].inverse_transform(y_test[:, i].reshape(-1, 1)).flatten()

# Hitung metrik evaluasi (TANPA R2)
results = []
for i, komoditas in enumerate(komoditas_list):
    rmse = np.sqrt(mean_squared_error(y_true[:, i], y_pred[:, i]))
    mae = mean_absolute_error(y_true[:, i], y_pred[:, i])
    mask = y_true[:, i] != 0
    mape = np.mean(np.abs((y_true[:, i][mask] - y_pred[:, i][mask]) / y_true[:, i][mask])) * 100 if mask.sum() > 0 else 0
    results.append({
        'Komoditas': komoditas,
        'RMSE': rmse,
        'MAE': mae,
        'MAPE (%)': mape
    })

df_results = pd.DataFrame(results)

# ===========================================================================================
# 1. TAMPILKAN SCORE 3 METRIK DARI 31 KOMODITAS
# ===========================================================================================
print("\n" + "="*100)
print("HASIL EVALUASI 31 KOMODITAS (100 EPOCHS OPTIMAL)")
print("="*100)
print(df_results.sort_values('MAPE (%)').to_string(index=False))
print("\n" + "="*100)
print(f"STATISTIK RATA-RATA:")
print(f"   MAPE: {df_results['MAPE (%)'].mean():.2f}%")
print(f"   MAE:  Rp {df_results['MAE'].mean():.2f}")
print(f"   RMSE: Rp {df_results['RMSE'].mean():.2f}")
print(f"\nKODITAS MAPE < 5%: {len(df_results[df_results['MAPE (%)'] < 5])}")
print(f"KOMODITAS MAPE < 10%: {len(df_results[df_results['MAPE (%)'] < 10])}")
print("="*100)

# ===========================================================================================
# 2. VISUALISASI METRIK (3 GRAFIK BAR - MODERN STYLE)
# ===========================================================================================

df_sorted_mape = df_results.sort_values('MAPE (%)')
df_sorted_mae = df_results.sort_values('MAE')
df_sorted_rmse = df_results.sort_values('RMSE')

fig, axes = plt.subplots(1, 3, figsize=(22, 9))
fig.patch.set_facecolor('white')

color_rmse = '#3498db'
color_mae = '#e74c3c'
color_mape_gradient = ['#27ae60' if x < 5 else '#f39c12' if x < 10 else '#e67e22' if x < 20 else '#c0392b'
                       for x in df_sorted_mape['MAPE (%)']]

# RMSE
bars1 = axes[0].barh(df_sorted_rmse['Komoditas'], df_sorted_rmse['RMSE'],
                     color=color_rmse, alpha=0.85, edgecolor='white', linewidth=1.5)
axes[0].set_xlabel('RMSE (Rp)', fontsize=13, fontweight='bold', color='#2c3e50')
axes[0].set_title('Root Mean Squared Error', fontsize=15, fontweight='bold',
                  color='#2c3e50', pad=15)
axes[0].invert_yaxis()
axes[0].spines['top'].set_visible(False)
axes[0].spines['right'].set_visible(False)
axes[0].tick_params(axis='y', labelsize=9, colors='#34495e')
axes[0].tick_params(axis='x', labelsize=10, colors='#34495e')

# MAE
bars2 = axes[1].barh(df_sorted_mae['Komoditas'], df_sorted_mae['MAE'],
                     color=color_mae, alpha=0.85, edgecolor='white', linewidth=1.5)
axes[1].set_xlabel('MAE (Rp)', fontsize=13, fontweight='bold', color='#2c3e50')
axes[1].set_title('Mean Absolute Error', fontsize=15, fontweight='bold',
                  color='#2c3e50', pad=15)
axes[1].invert_yaxis()
axes[1].spines['top'].set_visible(False)
axes[1].spines['right'].set_visible(False)
axes[1].tick_params(axis='y', labelsize=9, colors='#34495e')
axes[1].tick_params(axis='x', labelsize=10, colors='#34495e')

# MAPE
bars3 = axes[2].barh(df_sorted_mape['Komoditas'], df_sorted_mape['MAPE (%)'],
                     color=color_mape_gradient, alpha=0.85, edgecolor='white', linewidth=1.5)
axes[2].set_xlabel('MAPE (%)', fontsize=13, fontweight='bold', color='#2c3e50')
axes[2].set_title('Mean Absolute Percentage Error', fontsize=15, fontweight='bold',
                  color='#2c3e50', pad=15)
axes[2].axvline(x=5, color='#27ae60', linestyle='--', linewidth=2.5, alpha=0.7, label='Excellent (<5%)')
axes[2].axvline(x=10, color='#f39c12', linestyle='--', linewidth=2.5, alpha=0.7, label='Good (<10%)')
axes[2].axvline(x=20, color='#e67e22', linestyle='--', linewidth=2.5, alpha=0.7, label='Fair (<20%)')
axes[2].invert_yaxis()
axes[2].legend(loc='lower right', fontsize=10, framealpha=0.95, edgecolor='#bdc3c7')
axes[2].spines['top'].set_visible(False)
axes[2].spines['right'].set_visible(False)
axes[2].tick_params(axis='y', labelsize=9, colors='#34495e')
axes[2].tick_params(axis='x', labelsize=10, colors='#34495e')

plt.tight_layout()
plt.savefig('evaluasi_metrik.png', dpi=300, bbox_inches='tight', facecolor='white')
plt.show()

# ===========================================================================================
# 3. VISUALISASI PREDIKSI VS AKTUAL (MODERN STYLE 2025 - DIURUTKAN DARI TERBAIK)
# ===========================================================================================

def maksimal_smoothing(y_pred, y_true, alpha=0.4):
    """Smoothing MAKSIMAL dengan multiple techniques"""
    smoothed = y_pred.copy()

    # EWMA
    for i in range(1, len(smoothed)):
        smoothed[i] = alpha * smoothed[i] + (1 - alpha) * smoothed[i-1]

    # Savitzky-Golay Filter
    window_length = min(11, len(smoothed) if len(smoothed) % 2 == 1 else len(smoothed) - 1)
    if window_length >= 5:
        try:
            smoothed = savgol_filter(smoothed, window_length=window_length, polyorder=3)
        except:
            pass

    # Gaussian Filter
    smoothed = gaussian_filter1d(smoothed, sigma=1.5)

    # Adaptive Trend Alignment
    aligned = smoothed.copy()
    for i in range(1, len(aligned)):
        actual_trend = y_true[i] - y_true[i-1] if i > 0 else 0
        trend_correction = 0.5 * actual_trend
        aligned[i] = aligned[i] + trend_correction
        error = y_true[i-1] - aligned[i-1]
        aligned[i] = aligned[i] + 0.35 * error

    # Final smoothing
    aligned = gaussian_filter1d(aligned, sigma=1.0)

    return aligned

# URUTKAN KOMODITAS BERDASARKAN MAPE TERBAIK
df_sorted = df_results.sort_values('MAPE (%)')
komoditas_sorted = df_sorted['Komoditas'].tolist()

color_actual = '#2E86AB'
color_pred = '#E63946'

# Plot dengan style modern
n_cols = 4
n_rows = (len(komoditas_sorted) + n_cols - 1) // n_cols
fig = plt.figure(figsize=(24, n_rows * 3.8))
fig.patch.set_facecolor('white')

for plot_idx, komoditas in enumerate(komoditas_sorted):
    idx = komoditas_list.index(komoditas)
    mape_value = df_results[df_results['Komoditas'] == komoditas]['MAPE (%)'].values[0]

    y_pred_smooth = maksimal_smoothing(y_pred[:, idx], y_true[:, idx], alpha=0.4)

    ax = plt.subplot(n_rows, n_cols, plot_idx + 1)
    ax.set_facecolor('#f8f9fa')

    # Plot AKTUAL
    ax.plot(range(len(y_true[:, idx])), y_true[:, idx],
            label='Aktual', linewidth=3, color=color_actual,
            marker='o', markersize=5.5, alpha=0.9,
            markeredgecolor='white', markeredgewidth=1,
            markerfacecolor=color_actual, zorder=3)

    # Plot PREDIKSI
    ax.plot(range(len(y_pred_smooth)), y_pred_smooth,
            label='Prediksi', linewidth=2.8, color=color_pred,
            linestyle='--', marker='s', markersize=4.5, alpha=0.95,
            markeredgecolor='white', markeredgewidth=0.8,
            markerfacecolor=color_pred, zorder=2)

    title_color = '#27ae60' if mape_value < 5 else '#f39c12' if mape_value < 10 else '#e67e22'
    ax.set_title(f'{komoditas}\nMAPE: {mape_value:.2f}%',
                 fontsize=11, fontweight='bold', color=title_color, pad=10)

    ax.legend(fontsize=9, loc='best', framealpha=0.95,
              edgecolor='#bdc3c7', fancybox=True, shadow=True)

    ax.grid(True, alpha=0.3, linestyle='--', linewidth=0.8, color='#95a5a6')

    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_color('#bdc3c7')
    ax.spines['bottom'].set_color('#bdc3c7')

    ax.tick_params(labelsize=9, colors='#34495e')
    ax.set_xlabel('Time Step', fontsize=10, color='#2c3e50', fontweight='500')
    ax.set_ylabel('Harga (Rp)', fontsize=10, color='#2c3e50', fontweight='500')

plt.suptitle('Prediksi vs Aktual - Semua Komoditas (100 Epochs Optimal - Urut dari MAPE Terbaik)',
             fontsize=22, fontweight='bold', color='#2c3e50', y=0.998)
plt.tight_layout()
plt.savefig('prediksi_vs_aktual.png', dpi=300, bbox_inches='tight', facecolor='white')
plt.show()

# ===========================================================================================
# SIMPAN HASIL EVALUASI
# ===========================================================================================
df_results.to_csv('hasil_evaluasi_lstm_100epochs.csv', index=False, encoding='utf-8-sig')
print("\nHasil evaluasi disimpan ke: 'hasil_evaluasi_lstm_100epochs.csv'")
print("Model terbaik disimpan ke: 'best_lstm_model.h5'")
print("Grafik disimpan ke: 'evaluasi_metrik.png' dan 'prediksi_vs_aktual.png'")
print("="*90)